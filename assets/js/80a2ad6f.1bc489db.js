"use strict";(self.webpackChunkfreewili_docs=self.webpackChunkfreewili_docs||[]).push([[133],{6523:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var t=i(4848),s=i(8453),r=i(9980);const l={sidebar_position:4},o="Scripting with WASM",d={id:"io-app/scripting-with-wasm",title:"Scripting with WASM",description:"Introduction to WebAssembly (WASM)",source:"@site/docs/io-app/scripting-with-wasm.md",sourceDirName:"io-app",slug:"/io-app/scripting-with-wasm",permalink:"/io-app/scripting-with-wasm",draft:!1,unlisted:!1,editUrl:"https://github.com/freewili/FreeWili_WebDocs/blob/main/docs/io-app/scripting-with-wasm.md",tags:[],version:"current",lastUpdatedAt:1723167637e3,sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Host USB Serial API",permalink:"/io-app/host-usb-serial-api"},next:{title:"Scripting with ZoomIO",permalink:"/io-app/scripting-with-zoomio"}},a={},c=[{value:"Introduction to WebAssembly (WASM)",id:"introduction-to-webassembly-wasm",level:2},{value:"APIs and Implementation",id:"apis-and-implementation",level:2},{value:"Recommended Toolset",id:"recommended-toolset",level:2},{value:"Execution",id:"execution",level:2},{value:"Installing the SDK",id:"installing-the-sdk",level:2},{value:"Ubuntu Linux",id:"ubuntu-linux",level:3},{value:"Windows",id:"windows",level:3},{value:"Writing a Script",id:"writing-a-script",level:2},{value:"Compiling the Script",id:"compiling-the-script",level:2},{value:"Uploading the Script",id:"uploading-the-script",level:2},{value:"Executing the Script",id:"executing-the-script",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Ubuntu Linux",id:"ubuntu-linux-1",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"scripting-with-wasm",children:"Scripting with WASM"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction-to-webassembly-wasm",children:"Introduction to WebAssembly (WASM)"}),"\n",(0,t.jsx)(n.p,{children:"WebAssembly (WASM) technology allows a program compiler to target a generic CPU architecture. The program that runs the compiled code is called a WebAssembly runtime. This technology is included in the IO app. Please note that WebAssembly has nothing to do with the Web; it is simply named after the origin of the technology."}),"\n",(0,t.jsxs)(n.p,{children:["Users can compile programs, store them in the ",(0,t.jsx)(n.strong,{children:"FREE-WILi"})," file system, and execute them either on demand or at power-up."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"FREE-WILi"})," uses the WASM3 runtime: ",(0,t.jsx)(n.a,{href:"https://github.com/wasm3/wasm3",children:"WASM3 on GitHub"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"apis-and-implementation",children:"APIs and Implementation"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"FREE-WILi"})," IO app implements APIs to control Free Wili and provides them to the runtime. These APIs are defined in a header file called ",(0,t.jsx)(n.code,{children:"fwwasm.h"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"recommended-toolset",children:"Recommended Toolset"}),"\n",(0,t.jsxs)(n.p,{children:["The recommended toolset to compile for ",(0,t.jsx)(n.strong,{children:"FREE-WILi"})," WASM is the ",(0,t.jsx)(n.a,{href:"https://github.com/WebAssembly/wasi-sdk",children:"WASI SDK"}),". For a development IDE, we recommend using Visual Studio Code or CLion."]}),"\n",(0,t.jsx)(n.h2,{id:"execution",children:"Execution"}),"\n",(0,t.jsxs)(n.p,{children:["After compiling your script to WebAssembly (extension ",(0,t.jsx)(n.code,{children:".wasm"}),"), you must upload the file to the FREE-WILi filesystem.  The best way to do this is with the ",(0,t.jsx)(n.a,{href:"https://pypi.org/project/freewili/",children:"freewili"})," Python library, as will be explained under ",(0,t.jsx)(n.code,{children:"Getting Started"})," below."]}),"\n",(0,t.jsxs)(n.p,{children:["After your script is uploaded to the FREE-WILi, you can have it run on startup. The script will execute every time ",(0,t.jsx)(n.strong,{children:"FREE-WILi"})," is powered on. Alternatively, you can start WASM files on demand from the serial menu, or you can start them using the ",(0,t.jsx)(n.a,{href:"https://pypi.org/project/freewili/",children:"freewili"})," Python library."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsx)(n.p,{children:"There are a lot of different WebAssembly compilers; you can write your code in Rust, Python, C/C++, and several others.  The following example will use the wasi-sdk, which comes with a clang-based C/C++ compiler."}),"\n",(0,t.jsx)(n.h2,{id:"installing-the-sdk",children:"Installing the SDK"}),"\n",(0,t.jsx)(n.h3,{id:"ubuntu-linux",children:"Ubuntu Linux"}),"\n",(0,t.jsxs)(n.p,{children:["In Ubuntu Linux, the quickest way to get up and running is to download the ",(0,t.jsx)(n.code,{children:".deb"})," prebuilt package from Github under ",(0,t.jsx)(n.a,{href:"https://github.com/WebAssembly/wasi-sdk/releases",children:"Releases"}),".  For Ubuntu Linux on an x86-based machine, grab the Debian package (.deb) file for x86.  In this example, the file is ",(0,t.jsx)(n.a,{href:"https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/wasi-sdk-24.0-x86_64-linux.deb",children:"wasi-sdk-24.0-x86_64-linux.deb"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Install the package with ",(0,t.jsx)(n.code,{children:"sudo dpkg --install wasi-sdk-24.0-x86_64-linux.deb"})]}),"\n",(0,t.jsxs)(n.li,{children:["After installation, the compiler will be located here: ",(0,t.jsx)(n.code,{children:"/opt/wasi-sdk/bin/wasm32-wasi-clang++"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"windows",children:"Windows"}),"\n",(0,t.jsx)(n.p,{children:"TODO"}),"\n",(0,t.jsx)(n.h2,{id:"writing-a-script",children:"Writing a Script"}),"\n",(0,t.jsx)(n.p,{children:"Use VS Code or a text editor, and write your script.  For this example we will use C++ and write a simple script to turn each of\nthe board LEDs a different color."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Make sure you have the ",(0,t.jsx)(n.code,{children:"fwwasm.h"})," header file"]}),"\n",(0,t.jsxs)(n.li,{children:["Copy and paste this example script into your text editor, and save it as ",(0,t.jsx)(n.code,{children:"leds.cpp"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include "fwwasm.h"\n\n#define MAX_LOOPS 20\n#define NUM_LEDS 7\n#define DELAY_MS 50\n#define LED_FADE_DURATION 300\n\n//different color RGB values\n#define RED 0xFF0000\n#define PINK 0xFFC6FF\n#define ORANGE 0xFF7F00\n#define YELLOW 0xFFFF00\n#define GREEN 0x00FF00\n#define LIGHT_GREEN 0xCAFFBF\n#define BLUE 0x0000FF\n#define LIGHT_BLUE 0x9BF6FF\n#define INDIGO 0x4B0082\n#define VIOLET 0x9400D3\n#define MAX_COLORS 10\n\n//some macros to get color RGB components\n#define GET_RED(x) ((x >> 16) & 0xFF)\n#define GET_GREEN(x) ((x >> 8) & 0xFF)\n#define GET_BLUE(x) (x & 0xFF)\n\nint main()\n{\n    int rainbow[MAX_COLORS] = {RED, ORANGE, YELLOW, GREEN, LIGHT_GREEN, BLUE, LIGHT_BLUE, INDIGO, VIOLET, PINK};\n    int color_choice = 0;\n\n    //do the whole thing multiple times\n    for (int loops = 0; loops < MAX_LOOPS; loops++)\n    {\n        //set every LED one at a time\n        for (int led = 0; led < NUM_LEDS; led++)\n        {\n            //pick a color\n            int color = rainbow[color_choice];\n\n            //set the LED \n            setBoardLED(led, GET_RED(color), GET_GREEN(color), GET_BLUE(color), LED_FADE_DURATION, LEDManagerLEDMode::ledpulsefade);\n\n            //next time, get a new color.  If we used all of the colors, start over\n            color_choice++;\n            if (color_choice >= MAX_COLORS)\n                color_choice = 0;\n\n            //wait before setting the next LED\n            waitms(DELAY_MS);\n        }    \n    }\n\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"compiling-the-script",children:"Compiling the Script"}),"\n",(0,t.jsx)(n.p,{children:"At the commandline, in Linux:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"/opt/wasi-sdk/bin/wasm32-wasi-clang++ -O3 -s leds.cpp -o leds.wasm"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Note the ",(0,t.jsx)(n.code,{children:"-s"})," argument is ",(0,t.jsx)(n.strong,{children:"critical"})," to force the linker to strip debugging symbols from the output binary."]}),"\n",(0,t.jsx)(n.p,{children:"At the commandline, in Windows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"TODO"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"uploading-the-script",children:"Uploading the Script"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Install the ",(0,t.jsx)(n.code,{children:"freewili"})," Python library with ",(0,t.jsx)(n.code,{children:"pip install freewili"})]}),"\n",(0,t.jsxs)(n.li,{children:["Note: the ",(0,t.jsx)(n.code,{children:"freewili"})," library requires Python 3.11 or newer."]}),"\n",(0,t.jsxs)(n.li,{children:["Upload your script with ",(0,t.jsx)(n.code,{children:"fwi-serial -s leds.wasm -fn /scripts/leds.wasm"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"executing-the-script",children:"Executing the Script"}),"\n",(0,t.jsx)(n.p,{children:"Once the script is on the FREE-WILi filesystem, there are multiple ways it can be executed:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'From the FREE-WILi interface, you can select "Scripts" then select your script to execute it.'}),"\n",(0,t.jsxs)(n.li,{children:["From the commandline, you use the ",(0,t.jsx)(n.code,{children:"freewili"})," Python library to execute the script: ",(0,t.jsx)(n.code,{children:"fwi-serial -w leds.wasm"})]}),"\n",(0,t.jsxs)(n.li,{children:["From the serial terminal interface, you can select ",(0,t.jsx)(n.code,{children:"w"})," to run a script, then type ",(0,t.jsx)(n.code,{children:"leds.wasm"})," and hit enter"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A good tool for troubleshooting WASM files is the WebAssembly Explorer."}),"\n"]}),"\n","\n",(0,t.jsx)(r.A,{title:"WebAssembly Code Explorer",description:"",link:"https://wasdk.github.io/wasmcodeexplorer/",imageUrl:""}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"visual-studio-code-configuration",children:"Visual Studio Code Configuration"}),"\n",(0,t.jsx)(n.h2,{id:"ubuntu-linux-1",children:"Ubuntu Linux"}),"\n",(0,t.jsx)(n.p,{children:"Assuming you installed the sdk as described above, you can get Visual Studio code to recognize your wasi-sdk as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Install the CMake extension for VS Code, as well as the CMake Tools extension"}),"\n",(0,t.jsx)(n.li,{children:"Create a file called CMakeLists.txt and place it in the root of your project"}),"\n",(0,t.jsx)(n.li,{children:"Copy and paste the following into the CMakeLists.txt"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'cmake_minimum_required(VERSION 3.0)\nproject(wasm_project)\n\nset(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s")\n\nadd_executable(leds.wasm "leds.cpp")\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create a file called CMakePresets.json and place it in the root of your project"}),"\n",(0,t.jsx)(n.li,{children:"Copy and paste the following into the CMakePresets.json"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n    "version": 3,\n    "cmakeMinimumRequired": {\n        "major": 3,\n        "minor": 16,\n        "patch": 0\n    },\n    "configurePresets": [\n        {\n            "name": "default",\n            "hidden": true,\n            "generator": "Ninja"\n        },\n        {\n            "name": "wasi",\n            "description": "Configure for WASI using wasi-sdk",\n            "inherits": "default",\n            "toolchainFile": "/opt/wasi-sdk/share/cmake/wasi-sdk.cmake",\n            "cacheVariables": {\n                "CMAKE_BUILD_TYPE": "Release"\n            }\n        }\n    ]\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"CTRL-SHIFT-P"}),' in Visual Studio code and select "CMake: Select Configure Preset".  Select \'wasi` from the dropdown that appears.  (Note: You may need to reload VS Code for this option to appear.)']}),"\n",(0,t.jsx)(n.li,{children:"You can now use the 'build' button in Visual Studio Code to build your wasm project with one click."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},9980:(e,n,i)=>{i.d(n,{A:()=>d});i(6540);const t="card_t5fD",s="cardContent_yn8N",r="cardHeader_jh50",l="cardImage_zPy4";var o=i(4848);const d=e=>{let{title:n,description:i,link:d,imageUrl:a}=e;return(0,o.jsx)("a",{href:d,target:"_blank",rel:"noopener noreferrer",className:t,children:(0,o.jsxs)("div",{className:s,children:[(0,o.jsxs)("div",{className:r,children:[a&&(0,o.jsx)("img",{src:a,alt:n,className:l}),(0,o.jsx)("h3",{children:n})]}),(0,o.jsx)("p",{children:i})]})})}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var t=i(6540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);