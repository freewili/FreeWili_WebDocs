{"searchDocs":[{"title":"GUI : Screen, Buttons, and Lights","type":0,"sectionRef":"#","url":"/gui-screen-buttons-and-lights/","content":"GUI : Screen, Buttons, and Lights The FREE-WILi has a user interface that makes interacting with the device use-able without a host PC. The user interface is controlled by a separate CPU and interfaces with the main CPU via a 8 Megabit hardware handshaking UART. Fw Display LEDs, and buttons The core parts of the user interface are listed below: Description\tNotesColor Display\t320 x 240 16 bit color screen with GUI library\tmore information Buttons\t5 Multi color buttons Full Col or LEDs\t7 full color LEDs Spea ker\t16 bit audio\tmore information Microphone more information InfrRed Receiver\tReception of IR remote data Infrared Transmitter\tTransmission of IR remote data Real Time Clock\tTime and date powered from Lith ION battery Lithium ION Battery Manager\tControls the Lith-ION battery Accelerometer\tUsed as sensor for custom applications\tmore information","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Accelerometer","type":0,"sectionRef":"#","url":"/gui-screen-buttons-and-lights/accelerometer/","content":"Accelerometer FREE-WILi includes an accelerometer part number LIS3DH from ST microelectronics. The Accel sensor data is viewable from the serial menu and is usable from the API. The mounting is such that the Z direction points up from the screen and the X axis points towards the IO Connector. Stream Accel data from the display processor menu. LIS3DH - STMicroelectronics STMicroelectronics X Axis points to the IO Connector and Y points to the buttons, Z point out of the screen.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Custom Orca","type":0,"sectionRef":"#","url":"/extending-with-orcas/custom-orca/","content":"Custom Orca There are example projects for Orca for KiCAD and Altium Designer.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"GPIO","type":0,"sectionRef":"#","url":"/gpio/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"GPIO","url":"/gpio/#overview","content":" FREE-WILi includes a GPIO pin header for interacting with digital protocols. This GPIO header is flexible, allowing varying voltage levels and IO direction. The pin-out and connector are shown below.  FREE-WILi Pinout.    FREE-WILi GPIO Header  ","version":"Next","tagName":"h2"},{"title":"IO Voltage Levels​","type":1,"pageTitle":"GPIO","url":"/gpio/#io-voltage-levels","content":" The IO voltage levels are shared by all the GPIO. To set the voltage level you must inject a voltage on PIN4. This voltage can be set to 3.3v or 5.0v with a jumper. This would be a jumper between pins 2 and 4 for 5V. Or between 4 and 6 for 3.3V.  ","version":"Next","tagName":"h2"},{"title":"GPIO Pin Descriptions​","type":1,"pageTitle":"GPIO","url":"/gpio/#gpio-pin-descriptions","content":" The table below describes the pins. All GPIO except dedicated I2C pins can be used bidirectionally depending on the application. So the directions are the default.  Pin\tDescription\tDefault Direction\tNotes1\tSPI Chip Select Out\tOutput 2\t5V Out\tOutput\t5V to power IO and external circuit 3\tGPIO27 OUT\tOutput\tRPi 2040 GPIO27 4\tV PINS IN\tInput\tInput to set the IO voltage 1.1 to 5.5V 5\tUART1 Rx IN\tInput\tRPi 2040 UART 1 Receive (GPIO9) 6\t3.3V Out\tOutput\t3.3 V to Power IO and external circuit 7\tUART1 CTS IN\tInput\tRPi 2040 UART 1 Clear To Send (GPIO10) 8\tI2C0 SCL\tIn/Out\tRPi 2040 I2C 0 Clock (GPIO17) 9\tUART1 TX OUT\tOutput\tRPi 2040 UART1 Transmit (GPIO8) 10\tI2C0 SDA\tIn/Out\tRPi I2C 0 Data (GPIO16) 11\tUART1 RTS OUT\tOutput\tRPi 2040 UART 1 Request To Send (GPIO11) 12\tSPI1 RX IN\tInput\tRPi 2040 SPI 1 Receive (GPIO12) 13\tSPI1 TX OUT\tOutput\tRPi 2050 SPI 1 Transmit (GPIO15) 14\tGPIO 26 IN\tInput\tRPi 2040 GPIO26 15\tSPI1 SCLK OUT\tOutput\tRPi 2040 SPI 1 Clock (GPIO14) 16\tSWCLK IN\tInput\tRPi 2040 debugger clock input for external SWD debugger. 17\tGPIO25 OUT\tOutput\tRPi 2040 GPIO25. GPIO25 also connects to board status LED (same as RPi Pico) 18\tSWDIO\tIn/Out\tRPi 2040 debugger IO for external SWD debugger. 19\tGND 20\tGND   ","version":"Next","tagName":"h2"},{"title":"I2C Interface​","type":1,"pageTitle":"GPIO","url":"/gpio/#i2c-interface","content":" The I2C interface is connected to the RPi I2C0 peripheral. The I2C Interface uses the chip PCA9517 for buffering. Please see the data sheet below for details.    PCA9517-3139014.pdf pdf  ","version":"Next","tagName":"h2"},{"title":"IO Pins Interface​","type":1,"pageTitle":"GPIO","url":"/gpio/#io-pins-interface","content":" All the GPIO that is not I2C uses the sn74lxc1t45 for buffering.  sn74lxc1t45.pdf pdf ","version":"Next","tagName":"h2"},{"title":"FREE-WILi Firmware Update","type":0,"sectionRef":"#","url":"/freewili-firmware-update/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Updating the Main Processor​","type":1,"pageTitle":"FREE-WILi Firmware Update","url":"/freewili-firmware-update/#updating-the-main-processor","content":" Pressing and holding the RED button as USB is connected activates the RP2040 ROM bootloader. This will enable the default way to program the RP2040 via USB.  Receive or create a FREE-WILi MAIN UF2 file.Hold the RED button and plug in USB.The host computer will show FREE-WILi as a flash drive.Copy the MAIN UF2 file to the flash drive. Allow firmware to update.After the update, FREE-WILi will disconnect from USB and reconnect as a USB COM Port (normal operation).  ","version":"Next","tagName":"h2"},{"title":"Updating the Display Processor​","type":1,"pageTitle":"FREE-WILi Firmware Update","url":"/freewili-firmware-update/#updating-the-display-processor","content":" Pressing and holding the BLUE button as USB is connected activates the display processor bootloader.  Receive or create a FREE-WILi DISPLAY UF2 file.Hold the BLUE button and plug in USB.The host computer will show FREE-WILi as a flash drive.Copy the DISPLAY UF2 file to the flash drive. Allow firmware to update.After the update, FREE-WILi will disconnect from USB and reconnect as a USB COM Port (normal operation). ","version":"Next","tagName":"h2"},{"title":"Maestro Debug Orca","type":0,"sectionRef":"#","url":"/extending-with-orcas/maestro-debug-orca/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Maestro Debug Orca","url":"/extending-with-orcas/maestro-debug-orca/#features","content":" Integrated Raspberry Pi Debug Probe https://www.raspberrypi.com/documentation/microcontrollers/debug-probe.htmlPico scope Logic Analyzer Connector https://www.picotech.com/oscilloscope/2000/picoscope-2000-overviewLEDs which display IO statusSwitches to test GPIOs that are inputsPrototyping connectors for I2C (QWIIC) and SDCARDs.Jumper for selecting or injecting IO voltageConnector for plugging in additional Orca modules  ","version":"Next","tagName":"h2"},{"title":"Schematic​","type":1,"pageTitle":"Maestro Debug Orca","url":"/extending-with-orcas/maestro-debug-orca/#schematic","content":"   ","version":"Next","tagName":"h2"},{"title":"Useful tools​","type":1,"pageTitle":"Maestro Debug Orca","url":"/extending-with-orcas/maestro-debug-orca/#useful-tools","content":" Jumper wires  ELEGOO Breadbord Jumper Wires Amazon.com ","version":"Next","tagName":"h2"},{"title":"Color Display Widgets","type":0,"sectionRef":"#","url":"/gui-screen-buttons-and-lights/color-display-widgets/","content":"Color Display Widgets The color display allows you to display data using GUI widgets on panels. The are configured using the API. The table below lists the widgets.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Displaying Images","type":0,"sectionRef":"#","url":"/gui-screen-buttons-and-lights/displaying-images/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Displaying Images from the ROM​","type":1,"pageTitle":"Displaying Images","url":"/gui-screen-buttons-and-lights/displaying-images/#displaying-images-from-the-rom","content":" The FREE-WILi ROM contains a number of images you can use for your own applications. The following file lists the ROM images available.    FwRomAssets.pdf pdf  ","version":"Next","tagName":"h2"},{"title":"Displaying Images from the API​","type":1,"pageTitle":"Displaying Images","url":"/gui-screen-buttons-and-lights/displaying-images/#displaying-images-from-the-api","content":" The GUIAPI has a function for displaying images from files or ROM. Here we display cookie.fwi in the images directory.  obGUIAPI.addControlPictureFromFile(iPanelNumber,PANEL_PICTURE_COOKIE,20,160,&quot;cookie&quot;,1 );  Cookie.fwi shown on FREE-WILi screen.  To Display from ROM you can use this API  void addControlPicture(int iPanelIndex, int iControlIndex, int iX, int iY, int iPictureId, int iVisible)   ","version":"Next","tagName":"h2"},{"title":"Structure of Image File​","type":1,"pageTitle":"Displaying Images","url":"/gui-screen-buttons-and-lights/displaying-images/#structure-of-image-file","content":" The file consists of a binary header describing the file and the pixels. The pixels are stored in 16 bit 565 format. The 565 16 bit color format is a common format in embedded systems. There are a number of resources online that discuss this format. The best way to understand the format is to review the source code of fw_image.py  ","version":"Next","tagName":"h2"},{"title":"Binary Header​","type":1,"pageTitle":"Displaying Images","url":"/gui-screen-buttons-and-lights/displaying-images/#binary-header","content":" The beginning of the file is below. Ints are 32 bit here and shorts are 16 bit.  char szOut[8] = { &quot;FW01IMG&quot; }; unsigned int iImageFlags; unsigned int iImageTotalPixelCount; unsigned short iImageWidth; unsigned short iImageHeight; unsigned short iImageTransparentColor; unsigned short iImageId;   ","version":"Next","tagName":"h2"},{"title":"Pixel Data​","type":1,"pageTitle":"Displaying Images","url":"/gui-screen-buttons-and-lights/displaying-images/#pixel-data","content":" The pixel data is described below. A 16 bit unsigned short contains the pixel with varying intensities for Red, Green, and Blue. The final value is byte swapped.  rgb = (int(R)&lt;&lt;11) | (int(G)&lt;&lt;5) | int(B) rgb = ((rgb &lt;&lt; 8) &amp; 0xFF00) | ((rgb &gt;&gt; 8) &amp; 0xFF); ","version":"Next","tagName":"h2"},{"title":"Capturing Audio from Microphone","type":0,"sectionRef":"#","url":"/gui-screen-buttons-and-lights/capturing-audio-from-microphone/","content":"Capturing Audio from Microphone FREE-WILi has a integrated microphone. The microphone data is captured at a 8000 hz rate. This microphone data is fed to a FFT algorithm for display or provided via the GUIAPI. The serial menu provides a way to record the microphone to a wav file. A recording can also be triggered by the GUIAPI. These are recorded to the record directory. The recording time and volume level can be configured in the settings serial menu. The format of the wave file is compatible with the sound playback allowing you to play recorded sounds.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Extending with Orcas","type":0,"sectionRef":"#","url":"/extending-with-orcas/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Custom Orca Modules​","type":1,"pageTitle":"Extending with Orcas","url":"/extending-with-orcas/#custom-orca-modules","content":" To create your own, example projects are provided. ","version":"Next","tagName":"h2"},{"title":"FPGA Programming","type":0,"sectionRef":"#","url":"/hardware-low-level-details/ice40-fpga/fpga-programming/","content":"FPGA Programming The ice40 FPGA is a SRAM configured FPGA that is programmed automatically at power up. By default the ice40 reads a default configuration from its OTP memory. This default image allows basic pass through configuration of the RP2040 gpio to the IO drivers. Because of the SRAM configuration, the FPGA can be reprogrammed unlimted times at anytime by the RP2040 chip. To do this the RP2040 uses the the FPGA DONE, FPGA RESET and SPI interface from the RP2040. The ice40 documentation calls this the &quot;SPI Slave Configuration Interface&quot;. This method of programming is described in the Lattice ICE40 document &quot;iCE40 Programming and Configuration&quot; with document number FPGA-TN-02001. When reprogramming the FPGA the bit file would be fed from the RP2040. An obvious place to store the bit file is RP2040 flash as a const byte array. The Intrepid IO app can store multiple FPGA bit files in its file system and load them on command or at startup. It can also load them directly from USB.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"FPGA Connections","type":0,"sectionRef":"#","url":"/hardware-low-level-details/ice40-fpga/fpga-connections/","content":"FPGA Connections The FPGA connects to the Serial SRAM, IO Drivers, and the RP2040. The FPGA development tools including Open Source (yosys, nextpnr, icestorm) and commercial (icecube2) support a pin constraints file that defines how the pins connect to the HDL (verilog/vhdl) connections. This is included below: The PCF file is a text file you can view in a text editor. In the file you will see the names that end with Rp or Out. The Rp names connect to the RP2040 and the Out connects to the IO driver. set_io SPI_MISO_Rp 14 set_io SPI_MISO_Out 25 fw.pcf","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"ice40 FPGA Overview","type":0,"sectionRef":"#","url":"/hardware-low-level-details/ice40-fpga/ice40-fpga-overview/","content":"ice40 FPGA Overview The FREE-WILi contains an FPGA between the RP2040 main processor and the IO drivers. The FPGA allows sophisticated high speed IO and state machines that can process IO and communicate to the RP2040 or communicate to the host directly using high speed USB. The FPGA contains a default application so changing FPGA configuration is entirely optional. But changing the configuration is allowed and can be done at anytime and an unlimited number of times. See FPGA Programming for details. The FPGA is connected to a high speed FTDI USB interface and an 8Mbyte Serial SRAM. The block diagram is shown below. The part numbers associated with the FPGA IO system are below: Part\tPart Number\tNotesFTDI USB\tFT232HQ\tOperates in FT1248 mode. https://ftdichip.com/products/ft232hq/ Serial SRAM 8 MByte\tAPS6404L-3SQR-ZR\thttps://www.apmemory.com FPGA\tICE40UP5K-SG48I\thttps://www.latticesemi.com/en/Products/FPGAandCPLD/iCE40UltraPlus","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Hardware Low Level Details","type":0,"sectionRef":"#","url":"/hardware-low-level-details/","content":"Hardware Low Level Details The hardware low level details section is provided so end users can write their own apps that run on the main RP2040 PI Pico processor and/or develop their own FPGA front end design","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"FPGA Clock","type":0,"sectionRef":"#","url":"/hardware-low-level-details/ice40-fpga/fpga-clock/","content":"FPGA Clock The clock signal to the FPGA is supplied by the main RP2040. This is done on GPIO23 using the Clock Generator feature. The clock generated can be generated from numerous clock sources with a integer and fractional divider. For example, the default sys clock of 125 mhz can be used or divided down. Please see the rp2040 data sheet for details. The Intrepid IO app has a device setting where you can select the FPGA clock source and divider. The default setting is sys clock (125Mhz) divided by 4 (32.25 Mhz) .","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Main Menu Header","type":0,"sectionRef":"#","url":"/io-app/main-menu-header/","content":"Main Menu Header At the top of the main menu there is information on the setup and state of the FREE-WILi IOs. The IO state shows the PIN states and configuration of the UART, SPI, I2C and GPIOs. It also shows the FPGA clock and if UART streaming is enabled. After the IO state the file system contents are shown for the current directory. Finally the current real time clock setting is shown. The top of the main menu has information about the FREE-WILi configuration.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"IO App","type":0,"sectionRef":"#","url":"/io-app/","content":"IO App FREE-WILi includes an IO app that allows you to read and write all the IO of FREE-WILi. This app has a Serial Command Line Interface, support for a host API, on-board scripting, and a file system for stand-alone operations without a host. The serial command line interface provides a menu tree of commands to control FREE-WILi's IO interfaces. This is shown below: FREE-WILi's Serial Command Line Interface Main Menu To use a command, press a letter and the enter key. Then follow the instructions. The serial API is simply sending these menu commands and the data they expect. Below is a simple Python API that sets a GPIO high or low using the &quot;h&quot; and &quot;l&quot; commands. In API mode you can disable the menu text with by sending CTRL-B or reenable the menu text with CTRL-C. On board scripting uses web assembly technology. The code uses the WASM 3 engine with custom APIs to control FREE-WILi's interfaces. With this you can compile C/C++ or Rust source code to run on FREE-WILi with our without the host. The recommend Clang based wasi sdk is recommend https://github.com/WebAssembly/wasi-sdk. C/C++ program using WASI SDK and CLion. Finally, the file system provides a way to load scripts or run them at startup, load custom FPGA bit files, and store settings. This is shown below. Note getting files on the FREE-WILi uses the &quot;Download File&quot; command. The Filesystem menu provides interaction with file system.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Main Menu Commands","type":0,"sectionRef":"#","url":"/io-app/main-menu-commands/","content":"Main Menu Commands Commands are a single letter. After you enter the letter additonal information is entered. The following command are available from the main menu: Command\tDescription\tArguments\tNotesh\tset io high\tgpio number l\tset io low\tgpio number o\tgenerate pwm\tgpio number, frequency, and duty cycle g\tget all io Returns the state of all 32 IO of the FREE-WILi processor in hex s\tread/write spi\tthe spi write bytes\tReturns the read bytes in hex t\twrite radio\tthe radio index, and data in hex k\tread radio\tthe radio index and count of read\tReturns the data read i\twrite i2c\tdevice address, register, and additional write bytes r\tread i2c\tdevice address, register and read length\tReturns the data read p\tpoll i2c Returns a table of i2c address that responded to a read u\twrite uart\twrite bytes in hex y\tstream uart toggles on and off of sending uart data to host w\trun script\tname of script in file system m\tload fpga from file\tname of fpga bit file in file systems d\tdownload fpga\tfpga bit file bytes\tsend raw FPGA bits after this command. This has a 10 second timeout. x\tfiles Access the files menu z\tsettings Access the settings menu The Main Menu access the core FREE-WILi Features.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"ICE40 FPGA","type":0,"sectionRef":"#","url":"/hardware-low-level-details/ice40-fpga/","content":"ICE40 FPGA The FPGA ICE40 is a programmable IO engine between the GPIO and main RP2040 processor. Normally there is a default configuration for the FPGA. Changing the FPGA is an advanced topic. Please see the FPGA overview if you are interested in learning more.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Settings Menu","type":0,"sectionRef":"#","url":"/io-app/settings-menu/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Menu Options​","type":1,"pageTitle":"Settings Menu","url":"/io-app/settings-menu/#menu-options","content":" The menu options are shown below.  Name\tDescription\tNotesSPI\tConfigures SPI Baud rate, Bit Modes, Bit Width\tmore information I2C\tConfigures I2C bit rate and pull ups\tmore information UART\tConfigures UART Bit Rate, hand shaking, stop bits, and parity\tmore information FPGA Clock\tConfigures the input clock to the FPGA\tmore information Radio 1\tConfigures the CC1101 Radio 1 Radio 2\tConfigures the CC1101 Radio 1 GPIO Directions\tSets up directions of GPIO\tmore information RTC\tConfigures the real-time clock (RTC)\tmore information Default Script\tAllows a script to run on power up Default FPGA\tAllows a FPGA to configured at startup Save settings as Startup\tSaves current settings to &quot;settings.txt&quot; in root filesystem\t  ","version":"Next","tagName":"h2"},{"title":"Settings​","type":1,"pageTitle":"Settings Menu","url":"/io-app/settings-menu/#settings","content":" Settings are updated when you exit the settings menu.  The settings can be stored as a file when the &quot;r&quot; menu item is selected. This will store the settings so they will be loaded on startup.  These are stored in the file system under the filename &quot;settings.txt&quot;. ","version":"Next","tagName":"h2"},{"title":"Scripting with ZoomIO","type":0,"sectionRef":"#","url":"/io-app/scripting-with-zoomio/","content":"Scripting with ZoomIO ZoomIO is a scripting language that allows sub nanosecond precision control of the GPIO. Its very high level but produces native ARM assembly in the correct way to ensure design time determinism. To achieve precise determinism, native code runs in the second CPU core of the rp2040 and takes advantage of single cycle IO and the zero latency CPUs dedicated 4K RAM. The zoomio is used to implement the logic analyzer view on the GUI screen. The IOApp integrates the ZoomIO compiler. You can simply write the source file and download to the scripts directory. The FREE-WILi will determine which engine to target based on the file extension. The ZoomIO source files have the extension zio. The code below illustrates a simple ZoomIO program. The pin is generating a waveform on pin 27 with nanosecond control of the waveform. setio(27, 1); delay(2000); setio(27, 0); delay(1000); setio(27, 1); delay(2000); setio(27, 0); The ZoomIO commands are executed in a sequence. The following commands are currently supported. Command\tArguments\tNotessetio\t(arg 1) Io pin (arg2) state delay\t(arg1) delay in ns\t32 bit value. Delay precision is based of the CPU clock (default is 125Mhz or 8ns) loop\t(arg) number of loops till loopend endloop\tends loop waitfor\t(arg1) io pin (arg2) transistion\twaits for a pin to be high, low, rising, or failing begin\t(arg1) buffersizein bytes (arg2) bufferbitsize\tinitials a capture buffer up to 2Kbytes, word size can be 8,16, or 32 bits readpins\t(arg1) startpin\treads bufferbitsize in to the buffer. it the top bit is the start pin followed by consecutively numbered bits trigger\t(arg1) io pin (arg2) transition\ttriggers on a pin to be high, low, rising, or failing fifoloop\t(arg1) loops to make after trigger\tonce triggered still collected samples measure\t(arg1) generic tag\tcopies tag and 24 bit timer to buffer (buffer must be 32 bit) chrono\t(arg1) start=1,stop=2,reset=3, (arg2) measurement index\tRecords timing statistics for up to 16 values with min, max","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Making sounds","type":0,"sectionRef":"#","url":"/gui-screen-buttons-and-lights/making-sounds/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"API Calls for sounds​","type":1,"pageTitle":"Making sounds","url":"/gui-screen-buttons-and-lights/making-sounds/#api-calls-for-sounds","content":" void playSoundFromFile(char * szSoundPath); void playSoundFromNameOrID(const char * szSoundName, int iID); void playSoundFromNumber(bool bFloat, int iNumber, float fNumber, int iFloatDigits);   ","version":"Next","tagName":"h2"},{"title":"ROM Sounds​","type":1,"pageTitle":"Making sounds","url":"/gui-screen-buttons-and-lights/making-sounds/#rom-sounds","content":" FREE-WILi includes sounds in its ROM. Below is a list of ROM sounds.    FwROMAudioAssets.pdf pdf  ","version":"Next","tagName":"h2"},{"title":"Software to edit and create proper wav files​","type":1,"pageTitle":"Making sounds","url":"/gui-screen-buttons-and-lights/making-sounds/#software-to-edit-and-create-proper-wav-files","content":" Home Audacity ®    Audacity can export an 8000 hz 16 bit PCM wav file  ","version":"Next","tagName":"h2"},{"title":"Source for wav files​","type":1,"pageTitle":"Making sounds","url":"/gui-screen-buttons-and-lights/making-sounds/#source-for-wav-files","content":" WavSource.com: Free Wav Files and Sound Bites ","version":"Next","tagName":"h2"},{"title":"Host USB Serial API","type":0,"sectionRef":"#","url":"/io-app/host-usb-serial-api/","content":"Host USB Serial API To control FREE-WILi with a host device such as a Linux/Windows PC or Raspberry Pi you can use the USB serial API. By opening a USB serial port code and send menu commands and interpret the responses. The menu text useful for command line interface can be disabled by sending ASCII CTRL-B. It can be re enabled using CTRL-C.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"RTC Settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/rtc-settings/","content":"RTC Settings","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"I2C settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/i2c-settings/","content":"I2C settings The I2C Settings are listed below: Name\tDescription\tNotesFrequency\tBit rate of I2C bus\tLimited to 400Khz. PullUps\tEnable or disable 10K pull ups to VIO\tDefaulted to On","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"GPIO Settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/gpio-settings/","content":"GPIO Settings","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"FPGA Settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/fpga-settings/","content":"FPGA Settings The FPGA settings are shown below: Name\tDescription\tNotesClock Source\tThis is the internal clock used to generate the FPGA Clock\tThere are 4 options: the main PLL generated clock 125 Mhz, the 12 Mhz source oscillator, the 48 Mhz USB clock, and the internal 48khz RC analog clock Clock divider (int)\tThe integer part of the divider applied to the clock source Clock divider (frac)\tThe fractional part of clock divider The FPGA settings.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"UART Settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/uart-settings/","content":"UART Settings The UART Settings are listed below. The default is 115200 baud 8 data bits, no parity bit, and one stop bit ( 8N1 ): Learn more about UART here. Name\tDescription\tNotesFrequency\tUART Baud Rate RTS Handshaking\tHardware handshaking CTS Handshaking\tHardware handshaking Data Bits\tBits per UART frame Parity\tChecksum bit per frame Stop Bits\tBits at end of frame Module The UART settings.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"CC1101 Radio Settings","type":0,"sectionRef":"#","url":"/radios/black-radio-cc1101/cc1101-radio-settings/","content":"CC1101 Radio Settings The radio settings are shown below. The settings closely follow the ELECHOUSE CC1101 Ardunio driver from here: https://github.com/simonmonk/CC1101_arduino/blob/master/ELECHOUSE_CC1101.h Radio Settings.","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"File System Menu","type":0,"sectionRef":"#","url":"/io-app/file-system-menu/","content":"File System Menu The File System Menu allows you to interact with the file menu (shown below). Command\tDescription\tNotesChange Directory\tChanges the current directory Create Directory\tCreates a directory in the current directory Remove File or Directory Download File\tSend a file from the host to FREE-WILi device Upload File\tCopy a file from FREE-WILi to host device Print File\tDisplay file to the serial terminal Create Blank File\tCreates an empty file Rename File or Directory Append to File ","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"SPI Settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/spi-settings/","content":"SPI Settings SPI settings are listed below. The settings are configured using the menu shown below. Setting\tDescription\tNotesFrequency\tSPI Clock Frequency Chip Select Pin\tGPIO used for Chip select.\tGPIO must be configured for output. Data bits\tThe width of the spi bytes\t(only 8 is currently supported) CPOL\tclock polarity\tRefer to RP2040 data sheet section 4.10 on clock phase and polarity. Most common is 0,0. CPHA\tclock phase SPI has 5 settings","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Learn UART","type":0,"sectionRef":"#","url":"/helpful-links/learn-uart/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Watch this introduction video:​","type":1,"pageTitle":"Learn UART","url":"/helpful-links/learn-uart/#watch-this-introduction-video","content":"           ","version":"Next","tagName":"h3"},{"title":"Do a deep dive with the rp2040 UART​","type":1,"pageTitle":"Learn UART","url":"/helpful-links/learn-uart/#do-a-deep-dive-with-the-rp2040-uart","content":"  ","version":"Next","tagName":"h3"},{"title":"Helpful Links","type":0,"sectionRef":"#","url":"/helpful-links/","content":"Helpful Links C/C++ Installer for RP2040 Open Processor Raspberry Pi Pico Windows Installer - Raspberry Pi Raspberry Pi Texas Instruments Sub Ghz Help Forums Sub-1 GHz forum - Sub-1 GHz - TI E2E support forums Shawn Hymel's FPGA Tutorials using ice40 and open source tools GitHub - ShawnHymel/introduction-to-fpga Github More info on WebAssembly WebAssembly","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Radios","type":0,"sectionRef":"#","url":"/radios/","content":"Radios FREE-WILi has two radios integrate to help develop, validate and test radio systems. The different FREE-WILi devices have different radios to support different applications. Device\tDescription\tNotesblack\tCC1101 Sub GHZ red In development purple In development","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Black Radio (CC1101)","type":0,"sectionRef":"#","url":"/radios/black-radio-cc1101/","content":"Black Radio (CC1101) The FREE-WILi contains two CC1101 packet radios from Texas Instruments. The CC1101 radio has many settings to configure the radio and integrated packet processor. More information about the capabilities of the CC1101 radio can be found in the data sheet CC1101","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"The Basics","type":0,"sectionRef":"#","url":"/the-basics/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Turning FREE-WILi On or Off​","type":1,"pageTitle":"The Basics","url":"/the-basics/#turning-free-wili-on-or-off","content":" You can turn FREE-WILi on by pressing the gray button or by connecting it to USB. You can turn FREE-WILi off by holding the red button for 5 seconds. Note when connected to USB FREE-WILi remains on.  ","version":"Next","tagName":"h2"},{"title":"Using the USB interfaces​","type":1,"pageTitle":"The Basics","url":"/the-basics/#using-the-usb-interfaces","content":" When you plug FREE-WILi into a host, it will present 3 USB serial ports. One port connects to the FREE-WILi FPGA, One port connects to the IO App, and the last port connects to the GUI App processor.  ","version":"Next","tagName":"h2"},{"title":"Updating Firmware​","type":1,"pageTitle":"The Basics","url":"/the-basics/#updating-firmware","content":" The FREE-WILi has an integrated USB boot loader to update firmware. Please see this topic. ","version":"Next","tagName":"h2"},{"title":"FREE-WILi Overview","type":0,"sectionRef":"#","url":"/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"FREE-WILi Overview","url":"/#overview","content":" FREE-WILi Overview  FREE-WILi is a embedded development tool for helping test, debug, and develop electronic systems.  ","version":"Next","tagName":"h2"},{"title":"Use Cases​","type":1,"pageTitle":"FREE-WILi Overview","url":"/#use-cases","content":" I2C USB interfaceSPI USB interfaceUART USB interfaceUSB attached screen and buttons Uart based protocol tool supportTPMS fuzzer or simulatorKeyless Entry simulator/monitorCybersecurity penetration testingDevelopment platform that 80% doneLearning platform for Embedded Systems  ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"FREE-WILi Overview","url":"/#features","content":" SPI, I2C, PIO, and UART available on GPIO3 USB interfaces (Integrated HUB with 2 FS, 1 HS) for communication and power11 GPIO programmable voltage level for 1.1 to 5.5V with 24ma@3V or 32ma @5v (sn74lxc1t45)2 GPIO for I2C voltage level between 0.9V to 5.5V with software enabled 10K pulls (PCA9517)GPIO front end includes ICE40UP5k FPGA with 8MByte SRAM and High Speed USB (FT232H)Two SMA connectors for antenna for longer range320 x 240 Color Display5 User configurable buttons7 Full color LEDsIR transmitter and receiverDigital Speaker and MicrophoneRaspberry Pi Pico (RP2040) Open Micro Platform for specific applications or custom codeOrca modules plug into GPIO header allows expansion for specific use casesIO App firmware allows exercising all IO, USB Host API and Standalone scriptingGUI App firmware with Graphical panel and user controls16 Mbyte x 2 on board storage (22 MByte usable)1000 ma Lithium ION battery with integrated chargerReal Time Clock (RTC)Accelerometer  ","version":"Next","tagName":"h2"},{"title":"Radio Versions​","type":1,"pageTitle":"FREE-WILi Overview","url":"/#radio-versions","content":" FREE-WILi contains two radios.  FREE-WILi currently has one radio option:  Black contains two CC1101 Sub Ghz Radios with programmable filter ranges for 300-348, 387-464, 779-928 bands. ","version":"Next","tagName":"h2"},{"title":"Scripting with WASM","type":0,"sectionRef":"#","url":"/io-app/scripting-with-wasm/","content":"","keywords":"freewili  freewili documentation  FREE-WILi  GPIO  GUI  Orcas  UART  documentation","version":"Next"},{"title":"Introduction to WebAssembly (WASM)​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#introduction-to-webassembly-wasm","content":" WebAssembly (WASM) technology allows a program compiler to target a generic CPU architecture. The program that runs the compiled code is called a WebAssembly runtime. This technology is included in the IO app. Please note that WebAssembly has nothing to do with the Web; it is simply named after the origin of the technology.  Users can compile programs, store them in the FREE-WILi file system, and execute them either on demand or at power-up.  FREE-WILi uses the WASM3 runtime: WASM3 on GitHub.  ","version":"Next","tagName":"h2"},{"title":"APIs and Implementation​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#apis-and-implementation","content":" The FREE-WILi IO app implements APIs to control Free Wili and provides them to the runtime. These APIs are defined in a header file called fwwasm.h.  ","version":"Next","tagName":"h2"},{"title":"Recommended Toolset​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#recommended-toolset","content":" The recommended toolset to compile for FREE-WILi WASM is the WASI SDK. For a development IDE, we recommend using Visual Studio Code or CLion.  ","version":"Next","tagName":"h2"},{"title":"Execution​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#execution","content":" After compiling your script to WebAssembly (extension .wasm), you must upload the file to the FREE-WILi filesystem. The best way to do this is with the freewili Python library, as will be explained under Getting Started below.  After your script is uploaded to the FREE-WILi, you can have it run on startup. The script will execute every time FREE-WILi is powered on. Alternatively, you can start WASM files on demand from the serial menu, or you can start them using the freewili Python library.  Getting Started  There are a lot of different WebAssembly compilers; you can write your code in Rust, Python, C/C++, and several others. The following example will use the wasi-sdk, which comes with a clang-based C/C++ compiler.  ","version":"Next","tagName":"h2"},{"title":"Installing the SDK​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#installing-the-sdk","content":" ","version":"Next","tagName":"h2"},{"title":"Ubuntu Linux​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#ubuntu-linux","content":" In Ubuntu Linux, the quickest way to get up and running is to download the .deb prebuilt package from Github under Releases. For Ubuntu Linux on an x86-based machine, grab the Debian package (.deb) file for x86. In this example, the file is wasi-sdk-24.0-x86_64-linux.deb.  Install the package with sudo dpkg --install wasi-sdk-24.0-x86_64-linux.debAfter installation, the compiler will be located here: /opt/wasi-sdk/bin/wasm32-wasi-clang++  ","version":"Next","tagName":"h3"},{"title":"Windows​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#windows","content":" TODO  ","version":"Next","tagName":"h3"},{"title":"Writing a Script​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#writing-a-script","content":" Use VS Code or a text editor, and write your script. For this example we will use C++ and write a simple script to turn each of the board LEDs a different color.  Make sure you have the fwwasm.h header fileCopy and paste this example script into your text editor, and save it as leds.cpp  #include &quot;fwwasm.h&quot; #define MAX_LOOPS 20 #define NUM_LEDS 7 #define DELAY_MS 50 #define LED_FADE_DURATION 300 //different color RGB values #define RED 0xFF0000 #define PINK 0xFFC6FF #define ORANGE 0xFF7F00 #define YELLOW 0xFFFF00 #define GREEN 0x00FF00 #define LIGHT_GREEN 0xCAFFBF #define BLUE 0x0000FF #define LIGHT_BLUE 0x9BF6FF #define INDIGO 0x4B0082 #define VIOLET 0x9400D3 #define MAX_COLORS 10 //some macros to get color RGB components #define GET_RED(x) ((x &gt;&gt; 16) &amp; 0xFF) #define GET_GREEN(x) ((x &gt;&gt; 8) &amp; 0xFF) #define GET_BLUE(x) (x &amp; 0xFF) int main() { int rainbow[MAX_COLORS] = {RED, ORANGE, YELLOW, GREEN, LIGHT_GREEN, BLUE, LIGHT_BLUE, INDIGO, VIOLET, PINK}; int color_choice = 0; //do the whole thing multiple times for (int loops = 0; loops &lt; MAX_LOOPS; loops++) { //set every LED one at a time for (int led = 0; led &lt; NUM_LEDS; led++) { //pick a color int color = rainbow[color_choice]; //set the LED setBoardLED(led, GET_RED(color), GET_GREEN(color), GET_BLUE(color), LED_FADE_DURATION, LEDManagerLEDMode::ledpulsefade); //next time, get a new color. If we used all of the colors, start over color_choice++; if (color_choice &gt;= MAX_COLORS) color_choice = 0; //wait before setting the next LED waitms(DELAY_MS); } } return 0; }   ","version":"Next","tagName":"h2"},{"title":"Compiling the Script​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#compiling-the-script","content":" At the commandline, in Linux:  /opt/wasi-sdk/bin/wasm32-wasi-clang++ -O3 -s leds.cpp -o leds.wasm  Note the -s argument is critical to force the linker to strip debugging symbols from the output binary.  At the commandline, in Windows:  TODO  ","version":"Next","tagName":"h2"},{"title":"Uploading the Script​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#uploading-the-script","content":" Install the freewili Python library with pip install freewiliNote: the freewili library requires Python 3.11 or newer.Upload your script with fwi-serial -d leds.wasm /scripts/leds.wasm  ","version":"Next","tagName":"h2"},{"title":"Executing the Script​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#executing-the-script","content":" Once the script is on the FREE-WILi filesystem, there are multiple ways it can be executed:  From the FREE-WILi interface, you can select &quot;Scripts&quot; then select your script to execute it.From the commandline, you use the freewili Python library to execute the script: fwi-serial -w leds.wasmFrom the serial terminal interface, you can select w to run a script, then type leds.wasm and hit enter  ","version":"Next","tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"Scripting with WASM","url":"/io-app/scripting-with-wasm/#troubleshooting","content":" A good tool for troubleshooting WASM files is the WebAssembly Explorer.    WebAssembly Code Explorer ","version":"Next","tagName":"h2"}],"options":{"indexBaseUrl":true,"id":"default"}}