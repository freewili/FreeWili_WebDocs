{"searchDocs":[{"title":"Color Display Widgets","type":0,"sectionRef":"#","url":"/gui-screen-buttons-and-lights/color-display-widgets","content":"Color Display Widgets The color display allows you to display data using GUI widgets on panels. The are configured using the API. The table below lists the widgets.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Hardware Low Level Details","type":0,"sectionRef":"#","url":"/hardware-low-level-details/","content":"Hardware Low Level Details The hardware low level details section is provided so end users can write their own apps that run on the main RP2040 PI Pico processor and/or develop their own FPGA front end design","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"ICE40 FPGA","type":0,"sectionRef":"#","url":"/hardware-low-level-details/ice40-fpga/","content":"ICE40 FPGA The FPGA ICE40 is a programmable IO engine between the GPIO and main RP2040 processor. Normally there is a default configuration for the FPGA. Changing the FPGA is an advanced topic. Please see the FPGA overview if you are interested in learning more.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Maestro Debug Orca","type":0,"sectionRef":"#","url":"/extending-with-orcas/maestro-debug-orca","content":"","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Maestro Debug Orca","url":"/extending-with-orcas/maestro-debug-orca#features","content":" Integrated Raspberry Pi Debug Probe https://www.raspberrypi.com/documentation/microcontrollers/debug-probe.htmlPico scope Logic Analyzer Connector https://www.picotech.com/oscilloscope/2000/picoscope-2000-overviewLEDs which display IO statusSwitches to test GPIOs that are inputsPrototyping connectors for I2C (QWIIC) and SDCARDs.Jumper for selecting or injecting IO voltageConnector for plugging in additional Orca modules  ","version":"Next","tagName":"h2"},{"title":"Schematic​","type":1,"pageTitle":"Maestro Debug Orca","url":"/extending-with-orcas/maestro-debug-orca#schematic","content":"   ","version":"Next","tagName":"h2"},{"title":"Useful tools​","type":1,"pageTitle":"Maestro Debug Orca","url":"/extending-with-orcas/maestro-debug-orca#useful-tools","content":" Jumper wires  ELEGOO Breadbord Jumper Wires Amazon.com ","version":"Next","tagName":"h2"},{"title":"Custom Orca","type":0,"sectionRef":"#","url":"/extending-with-orcas/custom-orca","content":"Custom Orca There are example projects for Orca for KiCAD and Altium Designer.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Extending with Orcas","type":0,"sectionRef":"#","url":"/extending-with-orcas/","content":"","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Custom Orca Modules​","type":1,"pageTitle":"Extending with Orcas","url":"/extending-with-orcas/#custom-orca-modules","content":" To create your own, example projects are provided. ","version":"Next","tagName":"h2"},{"title":"GUI : Screen, Buttons, and Lights","type":0,"sectionRef":"#","url":"/gui-screen-buttons-and-lights/","content":"GUI : Screen, Buttons, and Lights The FREE-WiLi has a user interface that makes interacting with the device use-able without a host PC. The user interface is controlled by a separate CPU and interfaces with the main CPU via a 8 Megabit hardware handshaking UART. Fw Display LEDs, and buttons The core parts of the user interface are listed below: Description\tNotesColor Display\t320 x 240 16 bit color screen with GUI library\tmore information Buttons\t5 Multi color buttons Full Color LEDs\t7 full color LEDs Speaker\t16 bit audio Microphone InfraRed Receiver\tReception of IR remote data Infrared Transmitter\tTransmission of IR remote data Real Time Clock\tTime and date powered from Lith ION battery Lithium ION Battery Manager\tControls the Lith-ION battery\t","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"FPGA Clock","type":0,"sectionRef":"#","url":"/hardware-low-level-details/ice40-fpga/fpga-clock","content":"FPGA Clock The clock signal to the FPGA is supplied by the main RP2040. This is done on GPIO23 using the Clock Generator feature. The clock generated can be generated from numerous clock sources with a integer and fractional divider. For example, the default sys clock of 125 mhz can be used or divided down. Please see the rp2040 data sheet for details. The Intrepid IO app has a device setting where you can select the FPGA clock source and divider. The default setting is sys clock (125Mhz) divided by 4 (32.25 Mhz) .","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"FREE-WiLi Firmware Update","type":0,"sectionRef":"#","url":"/freewili-firmware-update","content":"FREE-WiLi Firmware Update Pressing the RED button when USB is powered activates the RP2040 ROM boot-loader. This will enable the default way to program the rp2040 via USB. Receive or create a FREE-WiLi UF2 file. Hold the red button and plug in USB. The host computer will show Free FREE-WiLi as a flash drive. Copy the UF2 file to the flash drive. Allow firmware to update. When done FREE-WiLi will disconnect from USB and reconnect as a USB COM Port (normal operation)","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"GPIO","type":0,"sectionRef":"#","url":"/gpio","content":"","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"GPIO","url":"/gpio#overview","content":" FREE-WiLi includes a GPIO pin header for interacting with digital protocols. This GPIO header is flexible, allowing varying voltage levels and IO direction. The pin-out and connector are shown below.  FREE-WiLi Pinout.    FREE-WiLi GPIO Header  ","version":"Next","tagName":"h2"},{"title":"IO Voltage Levels​","type":1,"pageTitle":"GPIO","url":"/gpio#io-voltage-levels","content":" The IO voltage levels are shared by all the GPIO. To set the voltage level you must inject a voltage on PIN4. This voltage can be set to 3.3v or 5.0v with a jumper. This would be a jumper between pins 2 and 4 for 5V. Or between 4 and 6 for 3.3V.  ","version":"Next","tagName":"h2"},{"title":"GPIO Pin Descriptions​","type":1,"pageTitle":"GPIO","url":"/gpio#gpio-pin-descriptions","content":" The table below describes the pins. All GPIO except dedicated I2C pins can be used bidirectionally depending on the application. So the directions are the default.  Pin\tDescription\tDefault Direction\tNotes1\tSPI Chip Select Out\tOutput 2\t5V Out\tOutput\t5V to power IO and external circuit 3\tGPIO27 OUT\tOutput\tRPi 2040 GPIO27 4\tV PINS IN\tInput\tInput to set the IO voltage 1.1 to 5.5V 5\tUART1 Rx IN\tInput\tRPi 2040 UART 1 Receive (GPIO9) 6\t3.3V Out\tOutput\t3.3 V to Power IO and external circuit 7\tUART1 CTS IN\tInput\tRPi 2040 UART 1 Clear To Send (GPIO10) 8\tI2C0 SCL\tIn/Out\tRPi 2040 I2C 0 Clock (GPIO17) 9\tUART1 TX OUT\tOutput\tRPi 2040 UART1 Transmit (GPIO8) 10\tI2C0 SDA\tIn/Out\tRPi I2C 0 Data (GPIO16) 11\tUART1 RTS OUT\tOutput\tRPi 2040 UART 1 Request To Send (GPIO11) 12\tSPI1 RX IN\tInput\tRPi 2040 SPI 1 Receive (GPIO12) 13\tSPI1 TX OUT\tOutput\tRPi 2050 SPI 1 Transmit (GPIO15) 14\tGPIO 26 IN\tInput\tRPi 2040 GPIO26 15\tSPI1 SCLK OUT\tOutput\tRPi 2040 SPI 1 Clock (GPIO14) 16\tSWCLK IN\tInput\tRPi 2040 debugger clock input for external SWD debugger. 17\tGPIO25 OUT\tOutput\tRPi 2040 GPIO25. GPIO25 also connects to board status LED (same as RPi Pico) 18\tSWDIO\tIn/Out\tRPi 2040 debugger IO for external SWD debugger. 19\tGND 20\tGND   ","version":"Next","tagName":"h2"},{"title":"I2C Interface​","type":1,"pageTitle":"GPIO","url":"/gpio#i2c-interface","content":" The I2C interface is connected to the RPi I2C0 peripheral. The I2C Interface uses the chip PCA9517 for buffering. Please see the data sheet below for details.    PCA9517-3139014.pdf pdf  ","version":"Next","tagName":"h2"},{"title":"IO Pins Interface​","type":1,"pageTitle":"GPIO","url":"/gpio#io-pins-interface","content":" All the GPIO that is not I2C uses the sn74lxc1t45 for buffering.  sn74lxc1t45.pdf pdf ","version":"Next","tagName":"h2"},{"title":"FPGA Connections","type":0,"sectionRef":"#","url":"/hardware-low-level-details/ice40-fpga/fpga-connections","content":"FPGA Connections The FPGA connects to the Serial SRAM, IO Drivers, and the RP2040. The FPGA development tools including Open Source (yosys, nextpnr, icestorm) and commercial (icecube2) support a pin constraints file that defines how the pins connect to the HDL (verilog/vhdl) connections. This is included below: The PCF file is a text file you can view in a text editor. In the file you will see the names that end with Rp or Out. The Rp names connect to the RP2040 and the Out connects to the IO driver. set_io SPI_MISO_Rp 14 set_io SPI_MISO_Out 25 fw.pcf","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"FPGA Programming","type":0,"sectionRef":"#","url":"/hardware-low-level-details/ice40-fpga/fpga-programming","content":"FPGA Programming The ice40 FPGA is a SRAM configured FPGA that is programmed automatically at power up. By default the ice40 reads a default configuration from its OTP memory. This default image allows basic pass through configuration of the RP2040 gpio to the IO drivers. Because of the SRAM configuration, the FPGA can be reprogrammed unlimted times at anytime by the RP2040 chip. To do this the RP2040 uses the the FPGA DONE, FPGA RESET and SPI interface from the RP2040. The ice40 documentation calls this the &quot;SPI Slave Configuration Interface&quot;. This method of programming is described in the Lattice ICE40 document &quot;iCE40 Programming and Configuration&quot; with document number FPGA-TN-02001. When reprogramming the FPGA the bit file would be fed from the RP2040. An obvious place to store the bit file is RP2040 flash as a const byte array. The Intrepid IO app can store multiple FPGA bit files in its file system and load them on command or at startup. It can also load them directly from USB.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Helpful Links","type":0,"sectionRef":"#","url":"/helpful-links/","content":"Helpful Links C/C++ Installer for RP2040 Open Processor Raspberry Pi Pico Windows Installer - Raspberry Pi Raspberry Pi Texas Instruments Sub Ghz Help Forums Sub-1 GHz forum - Sub-1 GHz - TI E2E support forums Shawn Hymel's FPGA Tutorials using ice40 and open source tools GitHub - ShawnHymel/introduction-to-fpga Github More info on WebAssembly WebAssembly","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"ice40 FPGA Overview","type":0,"sectionRef":"#","url":"/hardware-low-level-details/ice40-fpga/ice40-fpga-overview","content":"ice40 FPGA Overview The FREE-WiLi contains an FPGA between the RP2040 main processor and the IO drivers. The FPGA allows sophisticated high speed IO and state machines that can process IO and communicate to the RP2040 or communicate to the host directly using high speed USB. The FPGA contains a default application so changing FPGA configuration is entirely optional. But changing the configuration is allowed and can be done at anytime and an unlimited number of times. See FPGA Programming for details. The FPGA is connected to a high speed FTDI USB interface and an 8Mbyte Serial SRAM. The block diagram is shown below. The part numbers associated with the FPGA IO system are below: Part\tPart Number\tNotesFTDI USB\tFT232HQ\tOperates in FT1248 mode. https://ftdichip.com/products/ft232hq/ Serial SRAM 8 MByte\tAPS6404L-3SQR-ZR\thttps://www.apmemory.com FPGA\tICE40UP5K-SG48I\thttps://www.latticesemi.com/en/Products/FPGAandCPLD/iCE40UltraPlus","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Host USB Serial API","type":0,"sectionRef":"#","url":"/io-app/host-usb-serial-api","content":"Host USB Serial API To control FREE-WiLi with a host device such as a Linux/Windows PC or Raspberry Pi you can use the USB serial API. By opening a USB serial port code and send menu commands and interpret the responses. The menu text useful for command line interface can be disabled by sending ASCII CTRL-B. It can be re enabled using CTRL-C.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"File System Menu","type":0,"sectionRef":"#","url":"/io-app/file-system-menu","content":"File System Menu The File System Menu allows you to interact with the file menu (shown below). Command\tDescription\tNotesChange Directory\tChanges the current directory Create Directory\tCreates a directory in the current directory Remove File or Directory Download File\tSend a file from the host to FREE-WiLi device Upload File\tCopy a file from FREE-WiLi to host device Print File\tDisplay file to the serial terminal Create Blank File\tCreates an empty file Rename File or Directory Append to File ","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"FPGA Settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/fpga-settings","content":"FPGA Settings The FPGA settings are shown below: Name\tDescription\tNotesClock Source\tThis is the internal clock used to generate the FPGA Clock\tThere are 4 options: the main PLL generated clock 125 Mhz, the 12 Mhz source oscillator, the 48 Mhz USB clock, and the internal 48khz RC analog clock Clock divider (int)\tThe integer part of the divider applied to the clock source Clock divider (frac)\tThe fractional part of clock divider The FPGA settings.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Learn UART","type":0,"sectionRef":"#","url":"/helpful-links/learn-uart/","content":"","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Watch this introduction video:​","type":1,"pageTitle":"Learn UART","url":"/helpful-links/learn-uart/#watch-this-introduction-video","content":"           ","version":"Next","tagName":"h3"},{"title":"Do a deep dive with the rp2040 UART​","type":1,"pageTitle":"Learn UART","url":"/helpful-links/learn-uart/#do-a-deep-dive-with-the-rp2040-uart","content":"  ","version":"Next","tagName":"h3"},{"title":"Main Menu Header","type":0,"sectionRef":"#","url":"/io-app/main-menu-header","content":"Main Menu Header At the top of the main menu there is information on the setup and state of the FREE-WiLi IOs. The IO state shows the PIN states and configuration of the UART, SPI, I2C and GPIOs. It also shows the FPGA clock and if UART streaming is enabled. After the IO state the file system contents are shown for the current directory. Finally the current real time clock setting is shown. The top of the main menu has information about the FREE-WiLi configuration.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"GPIO Settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/gpio-settings","content":"GPIO Settings","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Scripting with WASM","type":0,"sectionRef":"#","url":"/io-app/scripting-with-wasm","content":"Scripting with WASM WebAssembly (WASM) technology allows a program compiler to target a generic CPU. The program the runs the compiled code is called a web assembly run time. This technology is included in the IO app. Please note WebAssembly has nothing to do with the Web - its just where the origin of the technology came from. Users can compile programs, store them in the FREE-WiLi's file system and execute them. Either on demand or at power up. FREE-WiLi uses the WASM 3 run time. https://github.com/wasm3/wasm3 The FREE-WiLi IO app implement APIs to control FW and provides them to the run time. These APIs are defined in a header file called &quot;fwwasm.h&quot; The recommend toolset to compile for FREE-WiLi wasm is the wasi sdk https://github.com/WebAssembly/wasi-sdk . For a development IDE visual studio code or CLion is recommended. In the settings menu you can select a WASM file to run on start -up. This will run anytime FREE-WiLi is powered on. Otherwise you can start WASM files from the serial menu. Because of the current file systems limitations we recommend a 3 letter .wsm extension. A good tool for trouble shooting WASM files is the web assembly explorer. WebAssembly Code Explorer","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"IO App","type":0,"sectionRef":"#","url":"/io-app/","content":"IO App FREE-WiLi includes an IO app that allows you to read and write all the IO of FREE-WiLi. This app has a Serial Command Line Interface, support for a host API, on-board scripting, and a file system for stand-alone operations without a host. The serial command line interface provides a menu tree of commands to control FREE-WiLi's IO interfaces. This is shown below: FREE-WiLi's Serial Command Line Interface Main Menu To use a command, press a letter and the enter key. Then follow the instructions. The serial API is simply sending these menu commands and the data they expect. Below is a simple Python API that sets a GPIO high or low using the &quot;h&quot; and &quot;l&quot; commands. In API mode you can disable the menu text with by sending CTRL-B or reenable the menu text with CTRL-C. On board scripting uses web assembly technology. The code uses the WASM 3 engine with custom APIs to control FREE-WiLi's interfaces. With this you can compile C/C++ or Rust source code to run on FREE-WiLi with our without the host. The recommend Clang based wasi sdk is recommend https://github.com/WebAssembly/wasi-sdk. C/C++ program using WASI SDK and CLion. Finally, the file system provides a way to load scripts or run them at startup, load custom FPGA bit files, and store settings. This is shown below. Note getting files on the FREE-WiLi uses the &quot;Download File&quot; command. The Filesystem menu provides interaction with file system.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"RTC Settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/rtc-settings","content":"RTC Settings","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"The Basics","type":0,"sectionRef":"#","url":"/the-basics","content":"","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Turning FREE-WiLi On or Off​","type":1,"pageTitle":"The Basics","url":"/the-basics#turning-free-wili-on-or-off","content":" You can turn FREE-WiLi on by pressing the gray button or by connecting it to USB. You can turn FREE-WiLi off by holding the red button for 5 seconds. Note when connected to USB FREE-WiLi remains on.  ","version":"Next","tagName":"h2"},{"title":"Using the USB interfaces​","type":1,"pageTitle":"The Basics","url":"/the-basics#using-the-usb-interfaces","content":" When you plug FREE-WiLi into a host, it will present 3 USB serial ports. One port connects to the FREE-WiLi FPGA, One port connects to the IO App, and the last port connects to the GUI App processor.  ","version":"Next","tagName":"h2"},{"title":"Updating Firmware​","type":1,"pageTitle":"The Basics","url":"/the-basics#updating-firmware","content":" The FREE-WiLi has an integrated USB boot loader to update firmware. Please see this topic. ","version":"Next","tagName":"h2"},{"title":"CC1101 Radio Settings","type":0,"sectionRef":"#","url":"/radios/black-radio-cc1101/cc1101-radio-settings","content":"CC1101 Radio Settings The radio settings are shown below. The settings closely follow the ELECHOUSE CC1101 Ardunio driver from here: https://github.com/simonmonk/CC1101_arduino/blob/master/ELECHOUSE_CC1101.h Radio Settings.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"I2C settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/i2c-settings","content":"I2C settings The I2C Settings are listed below: Name\tDescription\tNotesFrequency\tBit rate of I2C bus\tLimited to 400Khz. PullUps\tEnable or disable 10K pull ups to VIO\tDefaulted to On","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"UART Settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/uart-settings","content":"UART Settings The UART Settings are listed below. The default is 115200 baud 8 data bits, no parity bit, and one stop bit ( 8N1 ): Learn more about UART here. Name\tDescription\tNotesFrequency\tUART Baud Rate RTS Handshaking\tHardware handshaking CTS Handshaking\tHardware handshaking Data Bits\tBits per UART frame Parity\tChecksum bit per frame Stop Bits\tBits at end of frame Module The UART settings.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Main Menu Commands","type":0,"sectionRef":"#","url":"/io-app/main-menu-commands","content":"Main Menu Commands Commands are a single letter. After you enter the letter additonal information is entered. The following command are available from the main menu: Command\tDescription\tArguments\tNotesh\tset io high\tgpio number l\tset io low\tgpio number o\tgenerate pwm\tgpio number, frequency, and duty cycle g\tget all io Returns the state of all 32 IO of the FREE-WiLi processor in hex s\tread/write spi\tthe spi write bytes\tReturns the read bytes in hex t\twrite radio\tthe radio index, and data in hex k\tread radio\tthe radio index and count of read\tReturns the data read i\twrite i2c\tdevice address, register, and additional write bytes r\tread i2c\tdevice address, register and read length\tReturns the data read p\tpoll i2c Returns a table of i2c address that responded to a read u\twrite uart\twrite bytes in hex y\tstream uart toggles on and off of sending uart data to host w\trun script\tname of script in file system m\tload fpga from file\tname of fpga bit file in file systems d\tdownload fpga\tfpga bit file bytes\tsend raw FPGA bits after this command. This has a 10 second timeout. x\tfiles Access the files menu z\tsettings Access the settings menu The Main Menu access the core FREE-WiLi Features.","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Settings Menu","type":0,"sectionRef":"#","url":"/io-app/settings-menu/","content":"","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Menu Options​","type":1,"pageTitle":"Settings Menu","url":"/io-app/settings-menu/#menu-options","content":" The menu options are shown below.  Name\tDescription\tNotesSPI\tConfigures SPI Baud rate, Bit Modes, Bit Width\tmore information I2C\tConfigures I2C bit rate and pull ups\tmore information UART\tConfigures UART Bit Rate, hand shaking, stop bits, and parity\tmore information FPGA Clock\tConfigures the input clock to the FPGA\tmore information Radio 1\tConfigures the CC1101 Radio 1 Radio 2\tConfigures the CC1101 Radio 1 GPIO Directions\tSets up directions of GPIO\tmore information RTC\tConfigures the real-time clock (RTC)\tmore information Default Script\tAllows a script to run on power up Default FPGA\tAllows a FPGA to configured at startup Save settings as Startup\tSaves current settings to &quot;settings.txt&quot; in root filesystem\t  ","version":"Next","tagName":"h2"},{"title":"Settings​","type":1,"pageTitle":"Settings Menu","url":"/io-app/settings-menu/#settings","content":" Settings are updated when you exit the settings menu.  The settings can be stored as a file when the &quot;r&quot; menu item is selected. This will store the settings so they will be loaded on startup.  These are stored in the file system under the filename &quot;settings.txt&quot;. ","version":"Next","tagName":"h2"},{"title":"Black Radio (CC1101)","type":0,"sectionRef":"#","url":"/radios/black-radio-cc1101/","content":"Black Radio (CC1101) The FREE-WiLi contains two CC1101 packet radios from Texas Instruments. The CC1101 radio has many settings to configure the radio and integrated packet processor. More information about the capabilities of the CC1101 radio can be found in the data sheet CC1101","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"SPI Settings","type":0,"sectionRef":"#","url":"/io-app/settings-menu/spi-settings","content":"SPI Settings SPI settings are listed below. The settings are configured using the menu shown below. Setting\tDescription\tNotesFrequency\tSPI Clock Frequency Chip Select Pin\tGPIO used for Chip select.\tGPIO must be configured for output. Data bits\tThe width of the spi bytes\t(only 8 is currently supported) CPOL\tclock polarity\tRefer to RP2040 data sheet section 4.10 on clock phase and polarity. Most common is 0,0. CPHA\tclock phase SPI has 5 settings","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Radios","type":0,"sectionRef":"#","url":"/radios/","content":"Radios Except for FREE-WiLi blue, FREE-WiLi has two radios integrate to help develop, validate and test radio systems. The different FREE-WiLi devices have different radios to support different applications. Device\tDescription\tNotesblack\tCC1101 Sub GHZ red\tCC1352P7 Sub GHZ and 2.4 Ghz\tIn development purple\tCC2662 2.4Ghz for wireless battery management (TI wbms)\tIn development","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"FREE-WiLi Overview","type":0,"sectionRef":"#","url":"/","content":"","keywords":"freewili  FREE-WiLi  GPIO  GUI  Orcas  UART","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"FREE-WiLi Overview","url":"/#overview","content":" FREE-WiLi is a embedded development tool for helping test, debug, and develop electronic systems.  ","version":"Next","tagName":"h2"},{"title":"Use Cases​","type":1,"pageTitle":"FREE-WiLi Overview","url":"/#use-cases","content":" I2C USB interfaceSPI USB interfaceUART USB interfaceUSB attached screen and buttonsUart based protocol tool support (cxpi, sent, flexwire)TPMS fuzzer or simulatorKeyless Entry simulator/monitorDevelopment platform that 80% doneTI Wireless Battery ManagementInterface for: 6LoWPANAmazon SidewalkIEEE 802.15.4MIOTYProprietary 2.4 GHzThreadWi-SUN NWPWireless M-BusZigbee Learning platform for Embedded Systems  ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"FREE-WiLi Overview","url":"/#features","content":" SPI, I2C, PIO, and UART available on GPIO3 USB interfaces (Integrated HUB with 2 FS, 1 HS) for communication and power11 GPIO programmable voltage level for 1.1 to 5.5V with 24ma@3V or 32ma @5v (sn74lxc1t45)2 GPIO for I2C voltage level between 0.9V to 5.5V with software enabled pulls (PCA9517)GPIO front end includes ICE40UP5k FPGA with 8MByte SRAM and High Speed USB (FT232H)Two SMA connectors for antenna for longer range320 x 240 Color Display5 User configurable buttons7 Full color LEDsIR transmitter and receiverDigital Speaker and MicrophoneRaspberry Pi Pico (RP2040) Open Micro Platform for specific applications or custom codeOrca modules plug into GPIO header allow expandability for specific use caseIO App firmware allows exercising all IO, USB Host API and Standalone scripting16 Mbyte x 2 on board storage1000 ma Lithium ION battery with integrated chargerReal Time Clock (RTC)  ","version":"Next","tagName":"h2"},{"title":"Radio Versions​","type":1,"pageTitle":"FREE-WiLi Overview","url":"/#radio-versions","content":" FREE-WiLi contains two radios.  FREE-WiLi has 4 different radio options:  Black contains two CC1101 Sub Ghz Radios with programmable filter ranges for 300-348, 387-464, 779-928 bands.  Red contains two CC1352P7 MCUs with Sub Ghz Radio and 2.4 Ghz radios with high level support for 6LoWPAN, Amazon Sidewalk, IEEE 802.15.4, MIOTY, Proprietary 2.4 GHz, Thread, Wi-SUN NWP, Wireless M-Bus, Zigbee  Purple contains two CC2662 MCUs for supporting and testing TI Wireless BMS Applications  Blue contains no radio for lower cost applications or applications where radios are not permitted. ","version":"Next","tagName":"h2"}],"options":{"indexBaseUrl":true,"id":"default"}}